// Code generated by mockery v2.43.2. DO NOT EDIT.

package accrual

import (
	storage "github.com/kirilltitov/go-musthave-diploma/internal/storage"
	mock "github.com/stretchr/testify/mock"
)

// MockAccrual is an autogenerated mock type for the Accrual type
type MockAccrual struct {
	mock.Mock
}

type MockAccrual_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccrual) EXPECT() *MockAccrual_Expecter {
	return &MockAccrual_Expecter{mock: &_m.Mock}
}

// CalculateAmount provides a mock function with given fields: order
func (_m *MockAccrual) CalculateAmount(order storage.Order) (*CalculationResult, error) {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for CalculateAmount")
	}

	var r0 *CalculationResult
	var r1 error
	if rf, ok := ret.Get(0).(func(storage.Order) (*CalculationResult, error)); ok {
		return rf(order)
	}
	if rf, ok := ret.Get(0).(func(storage.Order) *CalculationResult); ok {
		r0 = rf(order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CalculationResult)
		}
	}

	if rf, ok := ret.Get(1).(func(storage.Order) error); ok {
		r1 = rf(order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAccrual_CalculateAmount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateAmount'
type MockAccrual_CalculateAmount_Call struct {
	*mock.Call
}

// CalculateAmount is a helper method to define mock.On call
//   - order storage.Order
func (_e *MockAccrual_Expecter) CalculateAmount(order interface{}) *MockAccrual_CalculateAmount_Call {
	return &MockAccrual_CalculateAmount_Call{Call: _e.mock.On("CalculateAmount", order)}
}

func (_c *MockAccrual_CalculateAmount_Call) Run(run func(order storage.Order)) *MockAccrual_CalculateAmount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(storage.Order))
	})
	return _c
}

func (_c *MockAccrual_CalculateAmount_Call) Return(_a0 *CalculationResult, _a1 error) *MockAccrual_CalculateAmount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAccrual_CalculateAmount_Call) RunAndReturn(run func(storage.Order) (*CalculationResult, error)) *MockAccrual_CalculateAmount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAccrual creates a new instance of MockAccrual. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccrual(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccrual {
	mock := &MockAccrual{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
