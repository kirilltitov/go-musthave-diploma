// Code generated by mockery v2.43.2. DO NOT EDIT.

package storage

import (
	context "context"

	"github.com/kirilltitov/go-musthave-diploma/internal/storage"
	decimal "github.com/shopspring/decimal"
	mock "github.com/stretchr/testify/mock"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// ApplyProcessedOrder provides a mock function with given fields: ctx, user, order, amount
func (_m *MockStorage) ApplyProcessedOrder(ctx context.Context, user storage.User, order storage.Order, amount decimal.Decimal) error {
	ret := _m.Called(ctx, user, order, amount)

	if len(ret) == 0 {
		panic("no return value specified for ApplyProcessedOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.User, storage.Order, decimal.Decimal) error); ok {
		r0 = rf(ctx, user, order, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_ApplyProcessedOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyProcessedOrder'
type MockStorage_ApplyProcessedOrder_Call struct {
	*mock.Call
}

// ApplyProcessedOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - user User
//   - order Order
//   - amount decimal.Decimal
func (_e *MockStorage_Expecter) ApplyProcessedOrder(ctx interface{}, user interface{}, order interface{}, amount interface{}) *MockStorage_ApplyProcessedOrder_Call {
	return &MockStorage_ApplyProcessedOrder_Call{Call: _e.mock.On("ApplyProcessedOrder", ctx, user, order, amount)}
}

func (_c *MockStorage_ApplyProcessedOrder_Call) Run(run func(ctx context.Context, user storage.User, order storage.Order, amount decimal.Decimal)) *MockStorage_ApplyProcessedOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.User), args[2].(storage.Order), args[3].(decimal.Decimal))
	})
	return _c
}

func (_c *MockStorage_ApplyProcessedOrder_Call) Return(_a0 error) *MockStorage_ApplyProcessedOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_ApplyProcessedOrder_Call) RunAndReturn(run func(context.Context, storage.User, storage.Order, decimal.Decimal) error) *MockStorage_ApplyProcessedOrder_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *MockStorage) CreateOrder(ctx context.Context, order storage.Order) error {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type MockStorage_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - order Order
func (_e *MockStorage_Expecter) CreateOrder(ctx interface{}, order interface{}) *MockStorage_CreateOrder_Call {
	return &MockStorage_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, order)}
}

func (_c *MockStorage_CreateOrder_Call) Run(run func(ctx context.Context, order storage.Order)) *MockStorage_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.Order))
	})
	return _c
}

func (_c *MockStorage_CreateOrder_Call) Return(_a0 error) *MockStorage_CreateOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_CreateOrder_Call) RunAndReturn(run func(context.Context, storage.Order) error) *MockStorage_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *MockStorage) CreateUser(ctx context.Context, user storage.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockStorage_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user User
func (_e *MockStorage_Expecter) CreateUser(ctx interface{}, user interface{}) *MockStorage_CreateUser_Call {
	return &MockStorage_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *MockStorage_CreateUser_Call) Run(run func(ctx context.Context, user storage.User)) *MockStorage_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.User))
	})
	return _c
}

func (_c *MockStorage_CreateUser_Call) Return(_a0 error) *MockStorage_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_CreateUser_Call) RunAndReturn(run func(context.Context, storage.User) error) *MockStorage_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// LoadAccount provides a mock function with given fields: ctx, user
func (_m *MockStorage) LoadAccount(ctx context.Context, user storage.User) (*storage.Account, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for LoadAccount")
	}

	var r0 *storage.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.User) (*storage.Account, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.User) *storage.Account); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_LoadAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadAccount'
type MockStorage_LoadAccount_Call struct {
	*mock.Call
}

// LoadAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - user User
func (_e *MockStorage_Expecter) LoadAccount(ctx interface{}, user interface{}) *MockStorage_LoadAccount_Call {
	return &MockStorage_LoadAccount_Call{Call: _e.mock.On("LoadAccount", ctx, user)}
}

func (_c *MockStorage_LoadAccount_Call) Run(run func(ctx context.Context, user storage.User)) *MockStorage_LoadAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.User))
	})
	return _c
}

func (_c *MockStorage_LoadAccount_Call) Return(_a0 *storage.Account, _a1 error) *MockStorage_LoadAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_LoadAccount_Call) RunAndReturn(run func(context.Context, storage.User) (*storage.Account, error)) *MockStorage_LoadAccount_Call {
	_c.Call.Return(run)
	return _c
}

// LoadOrder provides a mock function with given fields: ctx, orderNumber
func (_m *MockStorage) LoadOrder(ctx context.Context, orderNumber string) (*storage.Order, error) {
	ret := _m.Called(ctx, orderNumber)

	if len(ret) == 0 {
		panic("no return value specified for LoadOrder")
	}

	var r0 *storage.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*storage.Order, error)); ok {
		return rf(ctx, orderNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *storage.Order); ok {
		r0 = rf(ctx, orderNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, orderNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_LoadOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadOrder'
type MockStorage_LoadOrder_Call struct {
	*mock.Call
}

// LoadOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - orderNumber string
func (_e *MockStorage_Expecter) LoadOrder(ctx interface{}, orderNumber interface{}) *MockStorage_LoadOrder_Call {
	return &MockStorage_LoadOrder_Call{Call: _e.mock.On("LoadOrder", ctx, orderNumber)}
}

func (_c *MockStorage_LoadOrder_Call) Run(run func(ctx context.Context, orderNumber string)) *MockStorage_LoadOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_LoadOrder_Call) Return(_a0 *storage.Order, _a1 error) *MockStorage_LoadOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_LoadOrder_Call) RunAndReturn(run func(context.Context, string) (*storage.Order, error)) *MockStorage_LoadOrder_Call {
	_c.Call.Return(run)
	return _c
}

// LoadOrders provides a mock function with given fields: ctx, user
func (_m *MockStorage) LoadOrders(ctx context.Context, user storage.User) (*[]storage.Order, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for LoadOrders")
	}

	var r0 *[]storage.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.User) (*[]storage.Order, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.User) *[]storage.Order); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]storage.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_LoadOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadOrders'
type MockStorage_LoadOrders_Call struct {
	*mock.Call
}

// LoadOrders is a helper method to define mock.On call
//   - ctx context.Context
//   - user User
func (_e *MockStorage_Expecter) LoadOrders(ctx interface{}, user interface{}) *MockStorage_LoadOrders_Call {
	return &MockStorage_LoadOrders_Call{Call: _e.mock.On("LoadOrders", ctx, user)}
}

func (_c *MockStorage_LoadOrders_Call) Run(run func(ctx context.Context, user storage.User)) *MockStorage_LoadOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.User))
	})
	return _c
}

func (_c *MockStorage_LoadOrders_Call) Return(_a0 *[]storage.Order, _a1 error) *MockStorage_LoadOrders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_LoadOrders_Call) RunAndReturn(run func(context.Context, storage.User) (*[]storage.Order, error)) *MockStorage_LoadOrders_Call {
	_c.Call.Return(run)
	return _c
}

// LoadUser provides a mock function with given fields: ctx, login
func (_m *MockStorage) LoadUser(ctx context.Context, login string) (*storage.User, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for LoadUser")
	}

	var r0 *storage.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*storage.User, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *storage.User); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_LoadUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadUser'
type MockStorage_LoadUser_Call struct {
	*mock.Call
}

// LoadUser is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
func (_e *MockStorage_Expecter) LoadUser(ctx interface{}, login interface{}) *MockStorage_LoadUser_Call {
	return &MockStorage_LoadUser_Call{Call: _e.mock.On("LoadUser", ctx, login)}
}

func (_c *MockStorage_LoadUser_Call) Run(run func(ctx context.Context, login string)) *MockStorage_LoadUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockStorage_LoadUser_Call) Return(_a0 *storage.User, _a1 error) *MockStorage_LoadUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_LoadUser_Call) RunAndReturn(run func(context.Context, string) (*storage.User, error)) *MockStorage_LoadUser_Call {
	_c.Call.Return(run)
	return _c
}

// LoadWithdrawals provides a mock function with given fields: ctx, user
func (_m *MockStorage) LoadWithdrawals(ctx context.Context, user storage.User) (*[]storage.Withdrawal, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for LoadWithdrawals")
	}

	var r0 *[]storage.Withdrawal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.User) (*[]storage.Withdrawal, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.User) *[]storage.Withdrawal); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]storage.Withdrawal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStorage_LoadWithdrawals_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadWithdrawals'
type MockStorage_LoadWithdrawals_Call struct {
	*mock.Call
}

// LoadWithdrawals is a helper method to define mock.On call
//   - ctx context.Context
//   - user User
func (_e *MockStorage_Expecter) LoadWithdrawals(ctx interface{}, user interface{}) *MockStorage_LoadWithdrawals_Call {
	return &MockStorage_LoadWithdrawals_Call{Call: _e.mock.On("LoadWithdrawals", ctx, user)}
}

func (_c *MockStorage_LoadWithdrawals_Call) Run(run func(ctx context.Context, user storage.User)) *MockStorage_LoadWithdrawals_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.User))
	})
	return _c
}

func (_c *MockStorage_LoadWithdrawals_Call) Return(_a0 *[]storage.Withdrawal, _a1 error) *MockStorage_LoadWithdrawals_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStorage_LoadWithdrawals_Call) RunAndReturn(run func(context.Context, storage.User) (*[]storage.Withdrawal, error)) *MockStorage_LoadWithdrawals_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrderStatus provides a mock function with given fields: ctx, order, newStatus, allowedOldStatuses
func (_m *MockStorage) UpdateOrderStatus(ctx context.Context, order storage.Order, newStatus storage.OrderStatus, allowedOldStatuses []storage.OrderStatus) error {
	ret := _m.Called(ctx, order, newStatus, allowedOldStatuses)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.Order, storage.OrderStatus, []storage.OrderStatus) error); ok {
		r0 = rf(ctx, order, newStatus, allowedOldStatuses)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_UpdateOrderStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrderStatus'
type MockStorage_UpdateOrderStatus_Call struct {
	*mock.Call
}

// UpdateOrderStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - order Order
//   - newStatus OrderStatus
//   - allowedOldStatuses []OrderStatus
func (_e *MockStorage_Expecter) UpdateOrderStatus(ctx interface{}, order interface{}, newStatus interface{}, allowedOldStatuses interface{}) *MockStorage_UpdateOrderStatus_Call {
	return &MockStorage_UpdateOrderStatus_Call{Call: _e.mock.On("UpdateOrderStatus", ctx, order, newStatus, allowedOldStatuses)}
}

func (_c *MockStorage_UpdateOrderStatus_Call) Run(run func(ctx context.Context, order storage.Order, newStatus storage.OrderStatus, allowedOldStatuses []storage.OrderStatus)) *MockStorage_UpdateOrderStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.Order), args[2].(storage.OrderStatus), args[3].([]storage.OrderStatus))
	})
	return _c
}

func (_c *MockStorage_UpdateOrderStatus_Call) Return(_a0 error) *MockStorage_UpdateOrderStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_UpdateOrderStatus_Call) RunAndReturn(run func(context.Context, storage.Order, storage.OrderStatus, []storage.OrderStatus) error) *MockStorage_UpdateOrderStatus_Call {
	_c.Call.Return(run)
	return _c
}

// WithdrawBalanceFromAccount provides a mock function with given fields: ctx, user, amount, order
func (_m *MockStorage) WithdrawBalanceFromAccount(ctx context.Context, user storage.User, amount decimal.Decimal, order string) error {
	ret := _m.Called(ctx, user, amount, order)

	if len(ret) == 0 {
		panic("no return value specified for WithdrawBalanceFromAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.User, decimal.Decimal, string) error); ok {
		r0 = rf(ctx, user, amount, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStorage_WithdrawBalanceFromAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithdrawBalanceFromAccount'
type MockStorage_WithdrawBalanceFromAccount_Call struct {
	*mock.Call
}

// WithdrawBalanceFromAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - user User
//   - amount decimal.Decimal
//   - order string
func (_e *MockStorage_Expecter) WithdrawBalanceFromAccount(ctx interface{}, user interface{}, amount interface{}, order interface{}) *MockStorage_WithdrawBalanceFromAccount_Call {
	return &MockStorage_WithdrawBalanceFromAccount_Call{Call: _e.mock.On("WithdrawBalanceFromAccount", ctx, user, amount, order)}
}

func (_c *MockStorage_WithdrawBalanceFromAccount_Call) Run(run func(ctx context.Context, user storage.User, amount decimal.Decimal, order string)) *MockStorage_WithdrawBalanceFromAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.User), args[2].(decimal.Decimal), args[3].(string))
	})
	return _c
}

func (_c *MockStorage_WithdrawBalanceFromAccount_Call) Return(_a0 error) *MockStorage_WithdrawBalanceFromAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStorage_WithdrawBalanceFromAccount_Call) RunAndReturn(run func(context.Context, storage.User, decimal.Decimal, string) error) *MockStorage_WithdrawBalanceFromAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
